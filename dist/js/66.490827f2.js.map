{"version":3,"file":"js/66.490827f2.js","mappings":"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","sources":["webpack://webrtc-vue/./src/components/chat.vue","webpack://webrtc-vue/./src/components/chat.vue?a15c"],"sourcesContent":["<template>\r\n  <div class=\"chatbot-container\">\r\n    <div v-for=\"(message, index) in messages\" :key=\"index\" class=\"chat-window\">\r\n      <div :class=\"{  'sender-chat-box': message.sender === 'user', 'receiver-chat-box': message.sender === 'bot' }\">\r\n\r\n        <div v-if=\"message.sender === 'bot'\" :class=\"{ 'chat-bubble': true, 'receiver': true }\"\r\n             @click=\"speakMessage(message.text)\">\r\n          {{ message.text }}\r\n        </div>\r\n        <div v-else :class=\"{ 'chat-bubble': true, 'sender': true }\">\r\n          {{ message.text }}\r\n        </div>\r\n      </div>\r\n\r\n    </div>\r\n    <div class=\"message-input-container\">\r\n      <input type=\"text\" v-model=\"newMessageText\" placeholder=\"请输入您的问题...\" @keyup.enter=\"sendMessage\">\r\n      <div class=\"icon-buttons-container\">\r\n        <button @click=\"startSpeechRecognition\" :disabled=\"isRecognizing\" class=\"icon-button\">\r\n          <img src=\"../static/mic.svg\" alt=\"\">\r\n        </button>\r\n        <button @click=\"stopSpeechRecognition\" :disabled=\"!isRecognizing\" class=\"icon-button\">\r\n          <img src=\"../static/mic-off.svg\" alt=\"\">\r\n        </button>\r\n        <button type=\"submit\" class=\"icon-button\" @click=\"sendMessage\">\r\n          <img src=\"../static/send.svg\" alt=\"\">\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n\r\n\r\nexport default {\r\n  name: \"chatVue\",\r\n  data() {\r\n    return {\r\n      messages: [\r\n        {sender: 'bot', text: '您好，我是 ChatGPT。请问有什么可以帮您的？'},\r\n        {sender: 'user', text: '您好，我是 ChatGPT。请问有什么可以帮您的？'},\r\n      ],\r\n      newMessageText: '', // 用户输入的文本\r\n      finalTranscript: '', // 最终的语音转文字结果\r\n      isRecognizing: false, // 是否正在语音输入中\r\n      recognition: null, // 语音识别对象\r\n      socket: null,\r\n      loadingMessageIndex: null,\r\n      interimTranscript: '',\r\n    }\r\n  },\r\n  methods: {\r\n    init() {\r\n      this.socket = window.io();\r\n      this.socket.on(\"connect\", () => {\r\n        console.log('connect')\r\n      });\r\n      this.socket.on('chatGPT', (text) => {\r\n        this.messages.splice(this.loadingMessageIndex, 1) // 删除“正在回答问题”的提示消息\r\n        this.messages.push({sender: 'bot', text: text})\r\n      })\r\n    },\r\n    async sendMessage() {\r\n      await this.stopSpeechRecognition()\r\n      this.isRecognizing = false;\r\n      setTimeout(() => {\r\n        this.newMessageText = '';\r\n        this.finalTranscript = '';\r\n      }, 100)\r\n      if (this.newMessageText !== \"\") {\r\n        // 将用户输入的文本加入到消息数组中\r\n        this.messages.push({sender: 'user', text: this.newMessageText})\r\n\r\n        // 向 OpenAI 发送请求，获取机器人的回答\r\n        const text = this.messages[this.messages.length - 1].text;\r\n\r\n        this.messages.push({sender: 'bot', text: '正在回答问题，请稍等...'})\r\n        this.loadingMessageIndex = this.messages.length - 1 // 获取这个消息的索引\r\n        this.socket.emit('chatGPT', text)\r\n\r\n        console.log(this.newMessageText)\r\n      }\r\n    },\r\n    startSpeechRecognition() {\r\n      // 创建语音识别对象\r\n      this.recognition = new window.webkitSpeechRecognition();\r\n\r\n\r\n      // 设置语音识别对象的属性\r\n      this.recognition.continuous = true;\r\n      // this.recognition.interimResults = true;\r\n      this.recognition.lang = 'zh-CN';\r\n\r\n      // 当语音识别对象返回结果时触发\r\n      this.recognition.onresult = (event) => {\r\n        this.interimTranscript = '';\r\n        for (let i = event.resultIndex; i < event.results.length; i++) {\r\n          const transcript = event.results[i][0].transcript;\r\n          if (event.results[i].isFinal) {\r\n            this.finalTranscript += transcript;\r\n          } else {\r\n            this.interimTranscript += transcript;\r\n          }\r\n        }\r\n        // 将识别的结果显示在输入框中\r\n        this.newMessageText = this.finalTranscript + this.interimTranscript;\r\n      };\r\n\r\n      // 当语音识别对象停止识别时触发\r\n      this.recognition.onend = () => {\r\n        this.isRecognizing = false;\r\n        // 将最终的识别结果清空\r\n        this.finalTranscript = '';\r\n      };\r\n\r\n      // 开始语音识别\r\n      this.recognition.start();\r\n      this.isRecognizing = true;\r\n    },\r\n    stopSpeechRecognition() {\r\n      // 停止语音识别\r\n      console.log('1')\r\n      if (this.isRecognizing) {\r\n        this.recognition.stop();\r\n        this.isRecognizing = false;\r\n      }\r\n    },\r\n    speakMessage(text) {\r\n      let msg = new SpeechSynthesisUtterance(text);\r\n      window.speechSynthesis.speak(msg);\r\n    },\r\n\r\n  },\r\n  mounted() {\r\n    this.init()\r\n    setInterval(() => {\r\n      console.log(this.isRecognizing)\r\n      console.log(this.finalTranscript)\r\n      console.log(this.newMessageText)\r\n      console.log(this.interimTranscript)\r\n    }, 10000)\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.chat-bubble {\r\n  display: inline-block;\r\n  padding: 8px 12px;\r\n  border-radius: 20px;\r\n  margin: 5px;\r\n  max-width: 70%;\r\n  word-wrap: break-word;\r\n}\r\n\r\n.sender {\r\n  max-width: 250px;\r\n  word-wrap: break-word;\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  background: #f5f2f2;\r\n  padding: 10px;\r\n  border-radius: 10px;\r\n  box-shadow: 0.2rem 0.2rem 1rem rgba(51, 51, 51, 0.2);\r\n}\r\n\r\n.receiver {\r\n  max-width: 250px;\r\n  word-wrap: break-word;\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  background: #f5f2f2;\r\n  padding: 10px;\r\n  border-radius: 10px;\r\n  box-shadow: 0.2rem 0.2rem 1rem rgba(51, 51, 51, 0.2);\r\n}\r\n\r\n.sender-chat-box {\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  align-items: center;\r\n  margin: 20px 0;\r\n}\r\n\r\n.receiver-chat-box {\r\n  display: flex;\r\n  justify-content: flex-start;\r\n  align-items: center;\r\n  margin: 20px 0;\r\n}\r\n\r\n.chat-window {\r\n  overflow-y: auto;\r\n  display: flex;\r\n  flex-direction: column;\r\n  scroll-behavior: smooth;\r\n}\r\n\r\n.chatbot-container {\r\n  font-family: Arial, Helvetica, sans-serif;\r\n  border-radius: 10px;\r\n  background-color: #fff;\r\n  border: 1px solid #ccc;\r\n  padding: 10px;\r\n  width: 400px;\r\n  height: 600px;\r\n}\r\n\r\ninput[type=\"text\"] {\r\n  flex: 1;\r\n  height: 40px;\r\n  border-radius: 20px;\r\n  border: none;\r\n  outline: none;\r\n  font-size: 16px;\r\n}\r\n\r\n.message-input-container {\r\n  display: flex;\r\n  border-radius: 20px;\r\n  align-items: center;\r\n  padding: 10px;\r\n  border: 1px solid #ccc;\r\n}\r\n\r\n.icon-buttons-container {\r\n  display: flex;\r\n  align-items: center;\r\n  margin-left: 10px;\r\n}\r\n\r\n.icon-button {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background-color: transparent;\r\n  border: none;\r\n  cursor: pointer;\r\n  margin-left: 10px;\r\n}\r\n\r\n.icon-button:hover {\r\n  background-color: #f2f2f2;\r\n}\r\n\r\n\r\n</style>\r\n","import { render } from \"./chat.vue?vue&type=template&id=56433d13&scoped=true\"\nimport script from \"./chat.vue?vue&type=script&lang=js\"\nexport * from \"./chat.vue?vue&type=script&lang=js\"\n\nimport \"./chat.vue?vue&type=style&index=0&id=56433d13&scoped=true&lang=css\"\n\nimport exportComponent from \"D:\\\\Study\\\\毕业设计\\\\webrtc\\\\webrtc-vue\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-56433d13\"]])\n\nexport default __exports__"],"names":["class","_normalizeClass","_createElementVNode","src","_imports_0","alt","_hoisted_7","_imports_1","_hoisted_10","_imports_2","_hoisted_12","_createElementBlock","_hoisted_1","_Fragment","_renderList","$data","messages","message","index","key","sender","onClick","$event","$options","speakMessage","text","_hoisted_2","_hoisted_3","_toDisplayString","_hoisted_4","type","newMessageText","placeholder","onKeyup","_cache","_withKeys","args","sendMessage","_hoisted_5","startSpeechRecognition","disabled","isRecognizing","stopSpeechRecognition","name","data","finalTranscript","recognition","socket","loadingMessageIndex","interimTranscript","methods","init","this","window","io","on","console","log","splice","push","async","setTimeout","length","emit","webkitSpeechRecognition","continuous","lang","onresult","event","i","resultIndex","results","transcript","isFinal","onend","start","stop","msg","SpeechSynthesisUtterance","speechSynthesis","speak","mounted","setInterval","__exports__","render"],"sourceRoot":""}